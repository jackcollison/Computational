# Author: Jack Collison
# Course: ECON899: Recent Advances in Economics
# Date: November, 2022

# Import packages
using DataFrames, StatFiles, LinearAlgebra, Statistics

# Multinomial logit function
function p(x)
    # Overflow trick
    m = max(0.0, maximum(x))
    n = exp.(x .- m)

    # Return value
    return n ./ (exp.(-m) .+ sum(n, dims=1))
end

# Contraction mapping within a market
function contraction_mapping_market(data::DataFrame, market::Float64, markets::Vector{Union{Missing, Float64}}, Y::Array{Float64}, Œª‚Çö::Float64; tol::Float64=1e-12, newton_tol::Float64=1.0, maxiter::Int64=1000, verbose::Bool=false)
    # Find index of current market and initialize
    index = (markets .== market)
    P = data[index, :price]
    S = data[index, :share]
    Œ¥‚ÇÄ = data[index, :delta_iia]

    # Useful values  
    R = length(Y)
    J = length(S)

    # Pre-compute Œº
    Œº = Œª‚Çö * P * Y'

    # Initialize errors, results, counter
    error = Inf
    errors = []
    i = 0
    Œ¥ = nothing

    # Iterate while error is large
    while error > tol && i < maxiter
        # Increment counter
        i += 1

        # Compute choice probabilities
        œÉ = p(Œ¥‚ÇÄ .+ Œº)
        ùõî = sum(œÉ, dims=2) / R

        # Check Newton condition
        if error > newton_tol
            # Update with contraction mapping
            Œ¥ = Œ¥‚ÇÄ + log.(S) - log.(ùõî)
        else
            # Update with Newton step
            Œî = (1 / R) * ((I(J) .* (œÉ * (1 .- œÉ)')) - ((1 .- I(J)) .* (œÉ * œÉ'))) ./ ùõî
            Œ¥ = Œ¥‚ÇÄ + inv(Œî) * (log.(S) - log.(ùõî))
        end

        # Compute error and save
        error = maximum(abs.((Œ¥ - Œ¥‚ÇÄ)))
        push!(errors, error)

        # Print statement
        if verbose
            println("Iteration i = ", i, " for market ", market, " with error Œµ = ", error)
        end

        # Set new baseline
        Œ¥‚ÇÄ = Œ¥
    end

    # Return values
    return Œ¥, errors
end

# Contraction mapping across markets
function contraction_mapping(data::DataFrame, markets::Vector{Union{Missing, Float64}}, Y::Array{Float64}, Œª‚Çö::Float64; tol::Float64=1e-12, newton_tol::Float64=1.0, maxiter::Int64=1000, verbose::Bool=false)
    # Initialize values
    Œ¥ = []
    
    # Loop over all markets
    for market in unique(markets)
        # Contraction mapping for each market
        Œ¥ = vcat(Œ¥, contraction_mapping_market(data, market, markets, Y, Œª‚Çö, tol=tol, newton_tol=newton_tol, maxiter=maxiter, verbose=verbose)[1])
    end

    # Return value
    return Œ¥
end

# Function for œÅ
function œÅ(data::DataFrame, markets::Vector{Union{Missing, Float64}}, Y::Array{Float64}, Œª‚Çö::Float64, W::Array{Float64}; tol::Float64=1e-12, newton_tol::Float64=1.0, maxiter::Int64=1000, verbose::Bool=false)
    # Compute Œ¥ and Œ≤
    Œ¥ = contraction_mapping(data, markets, Y, Œª‚Çö, tol=tol, newton_tol=newton_tol, maxiter=maxiter, verbose=verbose)
    Œ≤ = inv((X' * Z) * W * (Z' * X)) * (X' * Z) * W * Z' * Œ¥

    # Return œÅ
    return Œ¥ - X * Œ≤
end

# GMM objective function
function gmm(data::DataFrame, markets::Vector{Union{Missing, Float64}}, Z::Matrix{Union{Missing, Float64}}, Y::Array{Float64}, Œª‚Çö::Array{Float64}, W::Array{Float64}; tol::Float64=1e-12, newton_tol::Float64=1.0, maxiter::Int64=1000, verbose::Bool=false)
    # Compute Œæ and return
    Œª‚Çö = Œª‚Çö[1]
    Œæ = œÅ(data, markets, Y, Œª‚Çö, W, tol=tol, newton_tol=newton_tol, maxiter=maxiter, verbose=verbose)
    return (Œæ' * Z * W * Z' * Œæ)[1,1]
end